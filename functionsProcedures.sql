-- Active: 1747421302880@@127.0.0.1@5433@update_db5@public

/*
                    @Procedural Approach:
    1. Language Support: Supports procedural languages like PL/pgSQL, PL/Perl, PL/Python, etc.
    2. Complex Logic: Allows for complex logic using control structures like loops, conditionals, and exception handling.
    3. Variable Support: Supports variable declarations and manipulation within the procedural code.
    4. Stored Procedures/Functions: Provides the ability to create stored procedures or functions, 

                    @Non-Procedural Approach:
    1. Declarative Queries: Focuses on writing declarative SQL queries to retrieve, insert, update, or delete data from the database.
    2. Simplicity: Emphasizes simplicity by expressing operations in terms of what data is needed.
    3. SQL Functions: Supports SQL functions, which are single SQL statements that return a value or set of values.
    4. Performance: Can sometimes offer better performance for simple operations due to the optimized query execution plans generated by the database engine.
*/


SELECT * FROM employees;

SELECT COUNT(*) FROM employees;

CREATE FUNCTION emp_count()
RETURNS INT 
LANGUAGE SQL
as
$$
 SELECT COUNT(*) FROM employees;
 DELETE FROM employees WHERE employee_id = 1;
$$

SELECT emp_count()


CREATE OR REPLACE FUNCTION emp_data()
RETURNS void 
LANGUAGE SQL
as
$$
--  SELECT COUNT(*) FROM employees;
 DELETE FROM employees WHERE employee_id = 1;
$$


SELECT emp_data()



CREATE OR REPLACE FUNCTION emp_data(p_emp_id INT)
RETURNS void 
LANGUAGE SQL
as
$$
--  SELECT COUNT(*) FROM employees;
 DELETE FROM employees WHERE employee_id = p_emp_id;
$$

SELECT emp_data(15)



-- CREATE Procedure remove_emp(())


CREATE PROCEDURE remove_emp()
LANGUAGE plpgsql
AS
$$
 BEGIN
    DELETE FROM employees WHERE employee_id = 21;
 END
$$

CALL remove_emp();
SELECT * FROM employees;



CREATE PROCEDURE remove_emp_var()
LANGUAGE plpgsql
AS
$$
 DECLARE
    test_var INT; 
 BEGIN
    SELECT employee_id INTO test_var FROM employees WHERE employee_id = 23 ;
    DELETE FROM employees WHERE employee_id = test_var ;
 END
$$

CALL remove_emp_var();
SELECT * FROM employees;


CREATE PROCEDURE remove_emp_id(p_emp_id INT)
LANGUAGE plpgsql
AS
$$
 DECLARE
    test_var INT; 
 BEGIN
    SELECT employee_id INTO test_var FROM employees WHERE employee_id = p_emp_id ;
    DELETE FROM employees WHERE employee_id = test_var ;
    RAISE NOTICE 'Employee with ID % has been removed', test_var;
 END
$$

CALL remove_emp_id(25);
SELECT * FROM employees;